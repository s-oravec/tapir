CREATE OR REPLACE PACKAGE ut_tapir AS

    description CONSTANT VARCHAR2(255) := 'Tapir test';

    PROCEDURE before_all;

    PROCEDURE before_each;

    PROCEDURE create_surrogate_key_seq(d VARCHAR2 := 'create surrogate key sequence should work');
    PROCEDURE drop_surrogate_key_seq(d VARCHAR2 := 'drop surrogate key sequence should work');

    PROCEDURE create_object_type(d VARCHAR2 := 'create object type should work');
    PROCEDURE drop_object_type(d VARCHAR2 := 'drop object type should work');

    PROCEDURE create_coll_type(d VARCHAR2 := 'create coll type should work');
    PROCEDURE drop_coll_type(d VARCHAR2 := 'drop coll type should work');

    PROCEDURE create_package(d VARCHAR2 := 'create package should work');
    PROCEDURE drop_package(d VARCHAR2 := 'drop package should work');

    PROCEDURE after_all;

END;
/
CREATE OR REPLACE PACKAGE BODY ut_tapir AS

    g_table_name  VARCHAR2(30) := 'UT_TAPIR_TEST';
    g_tapir_table tapir_table;

    --------------------------------------------------------------------------------
    PROCEDURE before_all IS
        le_name_already_used EXCEPTION;
        PRAGMA EXCEPTION_INIT(le_name_already_used, -955);
        le_only_one_pkey EXCEPTION;
        PRAGMA EXCEPTION_INIT(le_only_one_pkey, -2260);
    BEGIN
        --
        BEGIN
            EXECUTE IMMEDIATE 'create table ' || g_table_name ||
                              ' as select 1 id, dummy from dual';
        EXCEPTION
            WHEN le_name_already_used THEN
                NULL;
        END;
        --
        BEGIN
            EXECUTE IMMEDIATE 'alter table ' || g_table_name ||
                              ' add constraint ' || g_table_name ||
                              '_PK primary key (id)';
        EXCEPTION
            WHEN le_only_one_pkey THEN
                NULL;
        END;
        --
        g_tapir_table := tapir_util.get_tapir_table(a_table_name_in => g_table_name);
        --
    END;

    --------------------------------------------------------------------------------
    PROCEDURE before_each IS
    BEGIN
        --cleanup TAPI objects
        tapir.drop_all_for_table(a_table_name_in => g_table_name);
    END;

    --------------------------------------------------------------------------------
    PROCEDURE create_surrogate_key_seq(d VARCHAR2) IS
        l_count NUMBER;
    BEGIN
        --log
        pete_logger.log_method_description(d);
        --test
        tapir.create_surrogate_key_seq(a_table_name_in => g_table_name);
        --assert
        SELECT COUNT(1)
          INTO l_count
          FROM user_sequences
         WHERE sequence_name = upper(g_tapir_table.get_surrogate_key_seq_name);
        --
        pete_assert.eq(a_expected_in => 1,
                       a_actual_in   => l_count,
                       a_comment_in  => 'sequence ' ||
                                        g_tapir_table.get_surrogate_key_seq_name ||
                                        ' should have been created');
        --
    END;

    --------------------------------------------------------------------------------
    PROCEDURE drop_surrogate_key_seq(d VARCHAR2) IS
        l_count NUMBER;
    BEGIN
        --log
        pete_logger.log_method_description(d);
        --prepare
        tapir.create_surrogate_key_seq(a_table_name_in => g_table_name);
        --test
        tapir.drop_surrogate_key_seq(a_table_name_in => g_table_name);
        --assert
        SELECT COUNT(1)
          INTO l_count
          FROM user_sequences
         WHERE sequence_name = upper(g_tapir_table.get_surrogate_key_seq_name);
        --
        pete_assert.eq(a_expected_in => 0,
                       a_actual_in   => l_count,
                       a_comment_in  => 'sequence ' ||
                                        g_tapir_table.get_surrogate_key_seq_name ||
                                        ' should have been dropped');
        --
    END;

    --------------------------------------------------------------------------------
    PROCEDURE create_object_type(d VARCHAR2) IS
        l_count NUMBER;
    BEGIN
        --log
        pete_logger.log_method_description(d);
        --test
        tapir.create_tapi_object_type(a_table_name_in => g_table_name);
        --assert
        SELECT COUNT(1)
          INTO l_count
          FROM user_types
         WHERE type_name = upper(g_tapir_table.get_obj_type_name);
        --
        pete_assert.eq(a_expected_in => 1,
                       a_actual_in   => l_count,
                       a_comment_in  => 'object type ' ||
                                        g_tapir_table.get_obj_type_name ||
                                        ' should have been created');
        --
    END;

    --------------------------------------------------------------------------------
    PROCEDURE drop_object_type(d VARCHAR2) IS
        l_count NUMBER;
    BEGIN
        --log
        pete_logger.log_method_description(d);
        --prepare
        tapir.create_tapi_object_type(a_table_name_in => g_table_name);
        --test
        tapir.drop_tapi_object_type(a_table_name_in => g_table_name);
        --assert
        SELECT COUNT(1)
          INTO l_count
          FROM user_types
         WHERE type_name = upper(g_tapir_table.get_obj_type_name);
        --
        pete_assert.eq(a_expected_in => 0,
                       a_actual_in   => l_count,
                       a_comment_in  => 'object type ' ||
                                        g_tapir_table.get_obj_type_name ||
                                        ' should have been dropped');
    END;

    --------------------------------------------------------------------------------
    PROCEDURE create_coll_type(d VARCHAR2) IS
        l_count NUMBER;
    BEGIN
        --log
        pete_logger.log_method_description(d);
        --test
        tapir.create_tapi_object_type(a_table_name_in => g_table_name);
        tapir.create_tapi_coll_type(a_table_name_in => g_table_name);
        --assert
        SELECT COUNT(1)
          INTO l_count
          FROM user_types
         WHERE type_name = upper(g_tapir_table.get_coll_type_name);
        --
        pete_assert.eq(a_expected_in => 1,
                       a_actual_in   => l_count,
                       a_comment_in  => 'collection type ' ||
                                        g_tapir_table.get_obj_type_name ||
                                        ' should have been created');
        --
    END;

    --------------------------------------------------------------------------------
    PROCEDURE drop_coll_type(d VARCHAR2) IS
        l_count NUMBER;
    BEGIN
        --log
        pete_logger.log_method_description(d);
        --prepare
        tapir.create_tapi_object_type(a_table_name_in => g_table_name);
        tapir.create_tapi_coll_type(a_table_name_in => g_table_name);
        --test
        tapir.drop_tapi_coll_type(a_table_name_in => g_table_name);
        --assert
        SELECT COUNT(1)
          INTO l_count
          FROM user_types
         WHERE type_name = upper(g_tapir_table.get_coll_type_name);
        --
        pete_assert.eq(a_expected_in => 0,
                       a_actual_in   => l_count,
                       a_comment_in  => 'collection type ' ||
                                        g_tapir_table.get_coll_type_name ||
                                        ' should have been dropped');
    END;

    --------------------------------------------------------------------------------
    PROCEDURE create_package(d VARCHAR2) IS
        l_count NUMBER;
    BEGIN
        --log
        pete_logger.log_method_description(d);
        --prepare - create required objects
        tapir.create_surrogate_key_seq(a_table_name_in => g_table_name);
        tapir.create_tapi_object_type(a_table_name_in => g_table_name);
        tapir.create_tapi_coll_type(a_table_name_in => g_table_name);
        --test
        tapir.create_tapi_package(a_table_name_in => g_table_name);
        --assert
        SELECT COUNT(1)
          INTO l_count
          FROM user_objects
         WHERE object_type IN ('PACKAGE', 'PACKAGE BODY')
           AND object_name = upper(g_tapir_table.get_tapir_package_name);
        --
        pete_assert.eq(a_expected_in => 2,
                       a_actual_in   => l_count,
                       a_comment_in  => 'package ' ||
                                        g_tapir_table.get_tapir_package_name ||
                                        ' and it''s body should have been created');
        --
    END;

    --------------------------------------------------------------------------------
    PROCEDURE drop_package(d VARCHAR2) IS
        l_count NUMBER;
    BEGIN
        --log
        pete_logger.log_method_description(d);
        --prepare - create
        tapir.create_surrogate_key_seq(a_table_name_in => g_table_name);
        tapir.create_tapi_object_type(a_table_name_in => g_table_name);
        tapir.create_tapi_coll_type(a_table_name_in => g_table_name);
        tapir.create_tapi_package(a_table_name_in => g_table_name);
        --test
        tapir.drop_tapi_package(a_table_name_in => g_table_name);
        --assert
        SELECT COUNT(1)
          INTO l_count
          FROM user_types
         WHERE type_name = upper(g_tapir_table.get_tapir_package_name);
        --
        pete_assert.eq(a_expected_in => 0,
                       a_actual_in   => l_count,
                       a_comment_in  => 'package ' ||
                                        g_tapir_table.get_tapir_package_name ||
                                        ' should have been dropped');
    END;

    --------------------------------------------------------------------------------
    PROCEDURE after_all IS
    BEGIN
        --cleanup TAPI objects
        tapir.drop_all_for_table(a_table_name_in => g_table_name);
        --
        EXECUTE IMMEDIATE 'drop table ' || g_table_name || ' purge';
    END;

END;
/
